[_] 33% Stability.
	[_] 34% Release 1.0
		[_] 37% Architecture.
			[_] 37% Three distributions.
				[_] 50% Pod-Plexus comprising the modules that do the work.
					[X] 100% Reorganize files.
					[_] 0% Dist::Zilla administrivia.
						(see checklist below)
				[_] 25% App-Pod-Plexus stand-alone command line tool.
					[X] 100% Reorganize files.
					[_] 0% Decide how this will work.
						How do traditional "make dist"s translate documentation?
					[_] 0% Implement.
					[_] 0% Dist::Zilla administrivia.
						(see checklist below)
				[_] 0% Pod-Weaver-Plugin-PodPlexus to bind with Pod::Weaver.
					[_] 0% Learn how Pod::Weaver does this sort of thing.
					[_] 0% Decide how this will work.
					[_] 0% Implement.
					[_] 0% Dist::Zilla administrivia.
						(see checklist below)
				[_] 75% Dist-Zilla-Plugin-PodPlexus to bind with Dist::Zilla.
					[X] 100% Learn how Dist::Zilla works.
					[X] 100% Design.
					[X] 100% Implement.
					[_] 0% Dist::Zilla administrivia.
						(see checklist below)
		[_] 64% Additional declarative syntax.
			[_] 66% =example (class) (method)
				[X] 100% Methods implemented as Perl subs.
				[X] 100% Methods implemented as declarative "method" syntax.
				[_] 0% Methods implemented via attribute "handles" clauses.
				Perhaps find them based on "=method".
			[_] 0% =for example (class) (attribute)
				[_] 0% Attributes implemented as "has".
				[_] 0% Attributes implemented as Reflex's "has_many".
				Perhaps find them based on "=attribute".
			[X] 100% =copyright (years) (whom)
				Delegating to Pod::Weaver.
			[X] 100% =abstract (description)
				| =head1 NAME
				|
				| [% module 0%] - [% description %]
			[_] 66% =attribute (name)
				[X] 100% Initial implementation.
				[X] 100% Pod::Elemental and/or Pod::Weaver can gather default docs.
				[_] 0% Gather supplemental documentation from Class::MOP.
			[_] 0% Track consumed roles.
				Manual declaration isn't needed at this time.
				[_] 0% Detect and assimilate them into a "consumes" attribute.
					Multiple allowed.
					See Ancestry.
					[_] 0% Class::MOP introspection.
					[_] 0% Generate "=consumes" entries.
				Automatic inclusion of implementation documentation is a hard problem.
				Moose doesn't reliably support all cases at the time of this writing.
					It may support them by the time you read this.
					Please help if you can.
					(_) Auto-include documentation from the role being consumed.
						(_) This is hard for all cases.
						(_) Flatten out the documentation.
						(_) At least reference the role for methods it provides.
							It may be too hard to import meaningful documentation.
							Role docs may not be appropriate for classes that consume them.
			[_] 16% Track base classes.
				[_] 33% Detect and assimilate them into a "extends" attribute.
					Multiple allowed.
					See Ancestry.
					[X] 100% PPI detection.
					[_] 0% Class::MOP detection.
					[_] 0% Generate "=extends" entries.
				[_] 0% Support eplicit syntax when heuristics fail us.
			[X] 100% =license (?)
				Delegating to Pod::Weaver.
			[X] 100% =method (name)
				[X] 100% Pod::Elemental and/or Pod::Weaver can gather attributes.
			[X] 100% =bugs
				Delegating to Pod::Weaver.
		[_] 50% Documentation.
			[X] 100% Bonus points if it can document itself.
			[_] 0% Document everything.
		[_] 0% Boilerplates.
			[_] 0% Ancestry.
				[_] 0% Based on what is put into extends() and consumes().
				[_] 0% Also list known classes that extend or consume this one.
		[_] 25% Dist::Zilla administrivia.
			[X] 100% Break podplexus.pl into libraries.
			[_] 0% Tests.
				Although it will be used to document itself.
			[_] 0% dist.ini
			[_] 0% MANIFEST.SKIP
		[_] 33% Do as little as possible.
			The project is currently doing too much.
			[X] 100% Delegate as much to Pod::Weaver as possible.
			[_] 0% Consider making this a Pod::Weaver plugin.
				[_] 0% Get help making this so.
			[_] 0% Consider supporting Dist::Zilla directly.
				[_] 0% Get help making this so.
	[_] 33% Future / Nice To Have
		[_] 66% Use Class::MOP to intuit attribute, consumes, extends, and method.
			[X] 100% Load the module in question.
			[X] 100% Introspect to find attributes, methods, roles and base classes.
			[_] 0% Create default documentation for those that aren't already documented.
		[_] 0% Automatically include implementation in the documentation.
			Automatic is problematic.
			But it achieves a form of Literate Programming.
			[_] 0% Is this a necessary feature?
				We can already do this with "=method (same)".
				Maybe "=implementation" can be a macro for "=method (same)".
Implementation notes.
	Document represents a parsed document.
		Includes PPI information.
		Includes Pod::Elemental information.
		Includes Class::MOP information.
		Implements low-level accessors to each form of internal information.
		Implements high-level accessors and mutators to work on a POD level.
		Bits may be called from Template::Toolkit.
			Although high-level syntax will make this mostly pointless.
	Library represents a collection of all documents for a distribution.
		Includes documents indexed by relative path.
		Includes documents indexed by main package name.
		Implements accessors to find particular documents by path or module.
		Accessors may be used from Template::Toolkit.
			Although high-level syntax will make this mostly pointless.
Colophon
	This file is in Vim Outliner format.
		It's a plain text format where tab indents denote outline levels.
		The "[_] 0%" markings are checkboxes.
			Percentages of completeness are managed by the Vim Outliner plugin.
		The Vim Outliner plugin is available at http://sites.google.com/site/vimoutlinerinfo/
			Please be sure to use version 0.3.4 or later.
		A more editor-agnostic outliner format is welcome.
			It must be able to track progress, however.
		This next line enables Vim Outliner although we're not using the .otl file extension.
			vim: filetype=vo_base
